name: Download custom Release Asset
description: Download Asset from Croesufin Github release
inputs:
  repository:
    description: owner/repository
    required: false
    default: ""
  release:
    description: version of the release
    required: false
    default: "latest"
  download_dir:
    description: Custom directory name
    required: false
    default: ${GITHUB_HEAD_REF}
  github_token:
    description: Github access token to the repository
    required: true
    default: ""

outputs:
  artifact_name:
    description: The name of the downloaded artifact
    value: ${{ steps.getasset.outputs.artifact_name }}
  path:
    description: The location of the artifact on the runner
    value: ${{ steps.getasset.outputs.path }}
  result:
    description: The state of the action, if the file could be downloaded successfully
    value: ${{ steps.getasset.outputs.result }}



runs:
  using: "composite"
  steps:
    - id: getasset
      run: |
        set -e

        if [[ -z "$GITHUB_TOKEN" ]]; then
          echo "Missing GITHUB TOKEN in the action"
          exit 1
        fi

        if [[ -z "$GITHUB_REPOSITORY" ]]; then
          echo "Missing GITHUB_REPOSITORY env variable"
          exit 1
        fi

        OWNER_REPOSITORY=$GITHUB_REPOSITORY
        if ! [[ -z $INPUT_REPOSITORY ]]; then
          OWNER_REPOSITORY=$INPUT_REPOSITORY;
        fi

        AUTH="Authorization: token $GITHUB_TOKEN"
        response=$(curl -sH "$AUTH" https://api.github.com/repos/${OWNER_REPOSITORY}/releases/${{ inputs.release }})
        id=`echo "$response" | jq '.assets[0] .id' |  tr -d '"'`
        name=`echo "$response" | jq '.assets[0] .name' |  tr -d '"'`

        if [ -z "$id" ]; then
          echo "::set-output name=result::ERROR: version not found ${{ inputs.release }}"
          exit 1;
        fi;

        GH_ASSET="https://api.github.com/repos/${OWNER_REPOSITORY}/releases/assets/$id"
        # download the artifact
        mkdir -p  ${{ inputs.download_dir }}
        cd   ${{ inputs.download_dir }}
        curl -v -L -o "$name" -H "$AUTH" -H 'Accept: application/octet-stream' "$GH_ASSET"
        echo "::set-output name=artifact_name::$name"
        echo "::set-output name=result::$(echo success)"
        echo "::set-output name=path::$(echo ${PWD})"
      shell: bash

branding:
  icon: "download-cloud"
  color: "blue"